<para><emphasis>LuaBit 0.3.</emphasis></para>

      <para>WWW: <ulink
      url="http://luaforge.net/projects/bit/">http://luaforge.net/projects/bit/</ulink></para>

      <para>Available functions:</para>

      <para><variablelist>
          <varlistentry>
            <term>bit.bnot(n)</term>

            <listitem>
              <para>bitwise not (~n)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>bit.band(m, n)</term>

            <listitem>
              <para>bitwise and (m &amp; n)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>bit.bor(m, n)</term>

            <listitem>
              <para>bitwise or (m | n)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>bit.bor(m, n)</term>

            <listitem>
              <para>bitwise or (m | n)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>bit.bxor(m, n)</term>

            <listitem>
              <para>bitwise xor (m ^ n)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>bit.brshift(n, bits)</term>

            <listitem>
              <para>right shift (n &gt;&gt; bits)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>bit.blshift(n, bits)</term>

            <listitem>
              <para>left shift (n &lt;&lt; bits)</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>bit.blogic_rshift(n, bits)</term>

            <listitem>
              <para>logic right shift(zero fill &gt;&gt;&gt;).</para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <note>
         Please note that bit.brshift and bit.blshift only support number within 32 bits. 
      </note>

      <para><variablelist>
          <varlistentry>
            <term>bit.tobits(n)</term>

            <listitem>
              <para>convert n into a bit table(which is the 1/0 sequence),
              high bits first</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>bit.tonumb(bit_tbl)</term>

            <listitem>
              <para>convert a bit table into a number</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>hex.to_hex(n)</term>

            <listitem>
              <para>convert a number to a hex string</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>hex.to_dec(hex)</term>

            <listitem>
              <para>convert a hex string(prefix with '0x' or '0X') to
              number</para>
            </listitem>
          </varlistentry>
        </variablelist></para>

      <example>
        <title>With hex, you can write code like:</title>

        <para><programlisting>-- to get the lower 8 bits of 258, that's 2.
bit.band(258, hex.to_dec('0xFF'))</programlisting></para>
      </example>